service: webSession

functions:
  getWebSession:
    handler: service/src/handler/Handler.getWebSession
    events:
      - http:
          path: global/web-session/v1/{webSessionId}
          method: get
          request:
            parameters:
              paths:
                webSessionId: true
  putWebSession:
    handler: service/src/handler/Handler.putWebSession
    events:
      - http:
          path: global/web-session/v1/{webSessionId}
          method: put
          request:
            parameters:
              paths:
                webSessionId: true

plugins:
  - serverless-offline
  - serverless-s3-local
  - serverless-webpack
  - serverless-aws-alias

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: eu-west-1
  logRetentionInDays: 5
  deploymentBucket:
    name: tsm-gb-backoffice
    serverSideEncryption: AES256
  versionFunctions: true
  endpointType: regional
  iamRoleStatements:
    -  Effect: "Allow"
       Action:
         - "s3:PutObject"
         - "s3:GetObject"
       Resource: "arn:aws:s3:::tsm-gb-backoffice/*"

  stackTags: # Optional CF stack tags
    environment: ${opt:stage, self:provider.stage}
    application: ${self:service}
    product: websession

  environment:
    SERVERLESS_PROJECT_NAME: ${self:service} # FIXME Required for Sessions
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_STAGE: ${self:custom.stage}
    SERVERLESS_REGION: ${self:custom.region}

custom:
  webpack:
    packager: 'yarn'
  s3:
    host: 0.0.0.0
    port: 8000
    directory: /tmp

  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}

  # Stage dependent variables.
  # Usage: ${self:custom.${self:custom.stage}.<varname>}
  dev:
    testvar: test-${self:custom.stage}

  staging:
    testvar: test-${self:custom.stage}

  prod:
    testvar: test-${self:custom.stage}

package:
  include:
    - service/src/**
  exclude:
    - service/test/**
  excludeDevDependencies: true
